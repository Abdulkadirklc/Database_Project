openapi: "3.0.0"
info:
  title: "Event Management API"
  description: "API documentation for the Event Management system."
  version: "1.0.0"

servers:
  - url: "http://127.0.0.1:5000"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users:
    get:
      summary: "Get all users"
      tags:
        - Users
      responses:
        '200':
          description: "A list of users."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "alice"
                    email:
                      type: string
                      example: "alice@example.com"
                    bio:
                      type: string
                      example: "Some short bio"

    post:
      summary: "Create/Register a new user"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "secret123"
                bio:
                  type: string
                  example: "Short bio text"
      responses:
        '201':
          description: "User created successfully"
        '400':
          description: "Missing required fields"

  /users/login:
    post:
      summary: "User login, returns JWT"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "secret123"
      responses:
        '200':
          description: "Login successful, returns JWT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '401':
          description: "Invalid credentials"
        '400':
          description: "Username/password missing"

  /users/{username}:
    get:
      summary: "Get a single user by username"
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "The user data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "alice"
                  email:
                    type: string
                    example: "alice@example.com"
                  bio:
                    type: string
                    example: "Short bio..."
        '404':
          description: "User not found"

    put:
      summary: "Update an existing user by username (Cannot change username)"
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "updated@example.com"
                password:
                  type: string
                  example: "newSecret123"
                bio:
                  type: string
                  example: "Updated bio text"
      responses:
        '200':
          description: "User updated successfully"
        '401':
          description: "Unauthorized access"
        '403':
          description: "Unauthorized access. You can only update your own account."
        '404':
          description: "User not found"

    delete:
      summary: "Delete a user by username (Requires JWT)"
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "User deleted"
        '401':
          description: "Invalid or missing token"
        '404':
          description: "User not found"
