openapi: "3.0.0"
info:
  title: "Event Management API"
  description: "API documentation for the Event Management system."
  version: "1.0.0"

servers:
  - url: "http://127.0.0.1:5000"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users:
    get:
      summary: "Get users with advanced search"
      tags:
        - Users
      parameters:
        - in: query
          name: query
          required: false
          schema:
            type: string
            example: "emre"
          description: "Search string to match in username or email (case-insensitive)."
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: "Page number for pagination (default: 1)."
        - in: query
          name: size
          required: false
          schema:
            type: integer
            example: 20
          description: "Number of results per page (default: 20, max: 100)."
      responses:
        '200':
          description: "A list of users."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "alice"
                    email:
                      type: string
                      example: "alice@example.com"
                    bio:
                      type: string
                      example: "Some short bio"

    post:
      summary: "Create/Register a new user"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "secret123"
                bio:
                  type: string
                  example: "Short bio text"
      responses:
        '201':
          description: "User created successfully"
        '400':
          description: "Missing required fields"

    put:
      summary: "Update the authenticated user's account"
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "updated@example.com"
                password:
                  type: string
                  example: "newSecret123"
                bio:
                  type: string
                  example: "Updated bio text"
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully."
        '401':
          description: "Unauthorized access"
        '403':
          description: "Unauthorized access. You can only update your own account."

    delete:
      summary: "Delete the authenticated user's account"
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "User deleted successfully"
        '401':
          description: "Invalid or missing token"

  /users/login:
    post:
      summary: "User login, returns JWT"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  example: "secret123"
      responses:
        '200':
          description: "Login successful, returns JWT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '401':
          description: "Invalid credentials"
        '400':
          description: "Username/password missing"

  /users/{username}:
    get:
      summary: "Get a single user by username"
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: "The username of the user to fetch."
      responses:
        '200':
          description: "The user data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "alice"
                  email:
                    type: string
                    example: "alice@example.com"
                  bio:
                    type: string
                    example: "Short bio"
        '404':
          description: "User not found"

  
  /events:
    post:
      summary: "Create a new event"
      tags:
        - Events
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  example: 1
                event_name:
                  type: string
                  example: "Team Meeting"
                event_date:
                  type: string
                  format: date
                  example: "2025-01-10"
                event_location:
                  type: string
                  example: "Conference Room A"
                event_description:
                  type: string
                  example: "Quarterly team meeting."
      responses:
        '201':
          description: "Event created successfully"
        '400':
          description: "Missing required fields"

  /events/{event_id}:
    put:
      summary: "Update an event"
      tags:
        - Events
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_name:
                  type: string
                  example: "Updated Team Meeting"
                event_date:
                  type: string
                  format: date
                  example: "2025-01-15"
                event_location:
                  type: string
                  example: "Updated Conference Room B"
                event_description:
                  type: string
                  example: "Updated meeting description."
      responses:
        '200':
          description: "Event updated successfully"
        '400':
          description: "Missing required fields"

    delete:
      summary: "Delete an event"
      tags:
        - Events
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Event deleted successfully"
        '404':
          description: "Event not found"

  /events/user/groups:
    get:
      summary: "Retrieve events for groups the user belongs to"
      tags:
        - Events
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "List of events for the user's groups"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: integer
                      example: 1
                    event_name:
                      type: string
                      example: "Team Meeting"

  /events/sorted:
    get:
      summary: "Retrieve past and upcoming events"
      tags:
        - Events
      responses:
        '200':
          description: "Past and upcoming events separated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  past_events:
                    type: array
                    items:
                      type: object
                      properties:
                        event_id:
                          type: integer
                          example: 1
                        event_name:
                          type: string
                          example: "Past Event"
                  future_events:
                    type: array
                    items:
                      type: object
                      properties:
                        event_id:
                          type: integer
                          example: 2
                        event_name:
                          type: string
                          example: "Future Event"

  /events/tags:
    post:
      summary: "Add multiple tags to an event"
      tags:
        - Events
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  example: 1
                tags:
                  type: array
                  items:
                    type: string
                  example: ["urgent", "team"]
      responses:
        '201':
          description: "Tags added successfully"
        '400':
          description: "Missing required fields"

  /events/{event_id}/tags:
    get:
      summary: "Retrieve all tags for a specific event"
      tags:
        - Events
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "List of tags for the event"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag_name:
                      type: string
                      example: "urgent"

    put:
      summary: "Update tags for a specific event"
      tags:
        - Events
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  example: ["updated", "critical"]
      responses:
        '200':
          description: "Tags updated successfully"
        '400':
          description: "Tags are required"

  /events/tags/events/{tag_name}:
    get:
      summary: "Get all events with a specific tag"
      tags:
        - Events
      parameters:
        - in: path
          name: tag_name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "List of events with the tag"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: integer
                      example: 1
                    event_name:
                      type: string
                      example: "Team Meeting"

  /events/tags/popular:
    get:
      summary: "Retrieve popular tags based on usage"
      tags:
        - Events
      responses:
        '200':
          description: "List of popular tags"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag_name:
                      type: string
                      example: "urgent"
                    usage_count:
                      type: integer
                      example: 42


  /membership/:
    post:
      summary: "Add the authenticated user to a group as a Member"
      tags:
        - Membership
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  example: 1
                  description: "The ID of the group the user wants to join."
      responses:
        '201':
          description: "User added to the group successfully"
        '400':
          description: "Group ID is invalid or user is already a member"
        '404':
          description: "Group not found"

    get:
      summary: "List all members of a group with their roles"
      tags:
        - Membership
      parameters:
        - in: query
          name: group_id
          required: true
          schema:
            type: integer
          description: "The ID of the group to fetch members for"
      responses:
        '200':
          description: "List of all members with their roles"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      example: "alice"
                    user_role:
                      type: string
                      enum: [Member, Admin, Guest]
                      example: "Member"
        '400':
          description: "Group ID is required"
        '404':
          description: "Group not found"

  /membership/user/groups:
    get:
      summary: "List all groups a user is a member of with their roles"
      tags:
        - Membership
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
          description: "The username of the user to fetch groups for"
      responses:
        '200':
          description: "List of all groups with their roles the user is a member of"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    group_name:
                      type: string
                      example: "Developers"
                    user_role:
                      type: string
                      enum: [Member, Admin, Guest]
                      example: "Member"
        '400':
          description: "Username is required"
        '404':
          description: 
            - "User not found"
            - "User is not a member of any group"

  /membership/admins:
    get:
      summary: "List all admins with their group names"
      tags:
        - Membership
      responses:
        '200':
          description: "A list of all admins with their group names"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    group_name:
                      type: string
                      example: "Developers"
                    username:
                      type: string
                      example: "alice"
                    user_role:
                      type: string
                      example: "Admin"
  /membership/role:
    put:
      summary: "Update a user's role in their group"
      description: |
        Allows a user to update the role of a group member. Admins can update any user's role, while non-admin users can only update their own role. Ensures that there is always at least one admin in the group.
      tags:
        - Membership
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  description: "ID of the group."
                  example: 1
                user_id:
                  type: integer
                  description: "ID of the user whose role will be updated."
                  example: 42
                role:
                  type: string
                  description: "New role for the user."
                  enum: [Member, Guest, Admin]
                  example: "Member"
              required:
                - group_id
                - user_id
                - role
      responses:
        '200':
          description: "User role updated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User role updated successfully."
        '400':
          description: "Invalid input, such as missing or invalid parameters."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid role. Only 'Member', 'Guest', and 'Admin' are allowed."
        '403':
          description: "Unauthorized action or insufficient permissions."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You are not a member of this group."
        '404':
          description: "Target user is not a member of the group."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Target user is not a member of the group."

  /membership/remove:
    delete:
      summary: "Remove a user from a group"
      description: |
        Allows an admin or the user themselves to remove a user from a group. Ensures there is always at least one admin in the group.
      tags:
        - Membership
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: integer
                  description: "ID of the group."
                  example: 1
                user_id:
                  type: integer
                  description: "ID of the user to be removed."
                  example: 42
              required:
                - group_id
                - user_id
      responses:
        '200':
          description: "User removed from the group successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User removed from the group successfully."
        '400':
          description: "Invalid input, such as missing parameters or trying to remove the last admin."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot remove the last admin from the group."
        '403':
          description: "Unauthorized action or insufficient permissions."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You are not a member of this group."
        '404':
          description: "User not a member of the group."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not a member of the group."



  /groups:
    get:
      summary: "Get all groups"
      tags:
        - Groups
      responses:
        '200':
          description: "A list of groups."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    group_id:
                      type: integer
                      example: 1
                    group_name:
                      type: string
                      example: "Developers"
                    group_description:
                      type: string
                      example: "Group for developers"

    post:
      summary: "Create a new group"
      tags:
        - Groups
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_name:
                  type: string
                  example: "Developers"
                group_description:
                  type: string
                  example: "Group for developers"
      responses:
        '201':
          description: "Group created successfully"
        '400':
          description: "Missing required fields"

  /groups/{group_id}:
    get:
      summary: "Get a single group by ID"
      tags:
        - Groups
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "The group data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_name:
                    type: string
                    example: "Developers"
                  group_description:
                    type: string
                    example: "Group for developers"
        '404':
          description: "Group not found"

    put:
      summary: "Update an existing group by ID"
      tags:
        - Groups
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_name:
                  type: string
                  example: "Updated Developers"
                group_description:
                  type: string
                  example: "Updated group for developers"
      responses:
        '200':
          description: "Group updated successfully"
        '400':
          description: "Missing required fields"
        '403':
          description: "Unauthorized access"
        '404':
          description: "Group not found"

    delete:
      summary: "Delete a group by ID"
      tags:
        - Groups
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Group deleted successfully"
        '403':
          description: "Unauthorized access"
        '404':
          description: "Group not found"

  /messages:
    get:
      summary: "List all messages ordered from newest to oldest"
      tags:
        - Messages
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: group_id
          required: true
          schema:
            type: integer
            example: 1
          description: "Group ID to filter messages."
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: "Page number for pagination (default: 1)."
        - in: query
          name: size
          required: false
          schema:
            type: integer
            example: 20
          description: "Number of results per page (default: 20, max: 100)."
      responses:
        '200':
          description: "All messages ordered from newest to oldest"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: integer
                      example: 1
                    group_id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 101
                    user_message:
                      type: string
                      example: "This is a message"
                    message_time:
                      type: string
                      format: date-time
                      example: "2024-01-15T12:34:56"
        '400':
          description: "Group ID is required"
        '403':
          description: "Unauthorized access. You are not a member of this group."
        '401':
          description: "Unauthorized access or missing token"

    post:
      summary: "Create a new message"
      tags:
        - Messages
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_message:
                  type: string
                  example: "This is a new message"
                group_id:
                  type: integer
                  example: 1
          description: "Group ID and message content."
      responses:
        '201':
          description: "Message created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message created successfully"
                  message_id:
                    type: integer
                    example: 123
        '400':
          description: "Message text or group ID is required"
        '403':
          description: "Unauthorized access. You are not a member of this group."
        '401':
          description: "Unauthorized access or missing token"

  /messages/filter:
    get:
      summary: "Filter messages by date range with pagination"
      tags:
        - Messages
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: group_id
          required: true
          schema:
            type: integer
            example: 1
          description: "Group ID to filter messages."
        - in: query
          name: start_date
          required: true
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: "Start date for filtering (YYYY-MM-DD)."
        - in: query
          name: end_date
          required: true
          schema:
            type: string
            format: date
            example: "2024-02-01"
          description: "End date for filtering (YYYY-MM-DD)."
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: "Page number for pagination (default: 1)."
        - in: query
          name: size
          required: false
          schema:
            type: integer
            example: 20
          description: "Number of results per page (default: 20, max: 100)."
      responses:
        '200':
          description: "Filtered messages"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: integer
                      example: 1
                    user_message:
                      type: string
                      example: "Hello, world!"
                    message_time:
                      type: string
                      format: date-time
                      example: "2024-01-15T12:34:56"
        '400':
          description: "Group ID, start date, and end date are required"
        '403':
          description: "Unauthorized access. You are not a member of this group."
        '401':
          description: "Unauthorized access or missing token"

  /messages/{message_id}:
    delete:
      summary: "Delete a message by its ID"
      tags:
        - Messages
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: message_id
          required: true
          schema:
            type: integer
          description: "The ID of the message to delete."
      responses:
        '200':
          description: "Message deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message deleted successfully"
        '403':
          description: "Unauthorized access. Only the creator or a group admin can delete this message."
        '404':
          description: "Message not found"
        '401':
          description: "Unauthorized access or missing token"

    put:  
      summary: "Update a message by its ID"
      tags:
        - Messages
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: message_id
          required: true
          schema:
            type: integer
          description: "The ID of the message to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_message:
                  type: string
                  example: "Updated message content"
      responses:
        '200':
          description: "Message updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message updated successfully"
        '400':
          description: "Invalid request data"
        '403':
          description: "Unauthorized access. Only the creator can update this message."
        '404':
          description: "Message not found"
        '401':
          description: "Unauthorized access or missing token"


  /tags:
    post:
      summary: "Create a new tag"
      tags:
        - Tags
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                  example: "Event Management"
      responses:
        '201':
          description: "Tag created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tag created successfully"
                  tag_id:
                    type: integer
                    example: 1
        '400':
          description: "Tag name is required"

    get:
      summary: "List all tags with optional search"
      tags:
        - Tags
      parameters:
        - in: query
          name: query
          required: false
          schema:
            type: string
            example: "Event"
          description: "Search string to filter tags by name."
      responses:
        '200':
          description: "A list of tags."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag_id:
                      type: integer
                      example: 1
                    tag_name:
                      type: string
                      example: "Event Management"

  /tags/{tag_id}:
    put:
      summary: "Update a tag by its ID"
      tags:
        - Tags
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tag_id
          required: true
          schema:
            type: integer
          description: "The ID of the tag to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                  example: "Updated Tag Name"
      responses:
        '200':
          description: "Tag updated successfully"
        '404':
          description: "Tag not found"
        '400':
          description: "Tag name is required"

    delete:
      summary: "Delete a tag by its ID"
      tags:
        - Tags
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: tag_id
          required: true
          schema:
            type: integer
          description: "The ID of the tag to delete."
      responses:
        '200':
          description: "Tag deleted successfully"
        '404':
          description: "Tag not found"

  /events/{event_id}/attendance:
    post:
      summary: "Add attendance to an event"
      description: "Marks the current user as attending or interested in an event. Requires JWT."
      tags:
        - Attendance
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
          description: "Event ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "going"
      responses:
        '201':
          description: "Attendance added successfully"
        '400':
          description: "Attendance status is required"

    get:
      summary: "List attendance for an event"
      description: "Retrieves a list of users who are attending or interested in a specific event."
      tags:
        - Attendance
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
          description: "Event ID"
      responses:
        '200':
          description: "List of attendance records"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      example: 101
                    username:
                      type: string
                      example: "alice"
                    status:
                      type: string
                      example: "going"

    put:
      summary: "Update attendance for an event"
      description: "Updates the attendance status of the current user. Requires JWT."
      tags:
        - Attendance
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
          description: "Event ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "not_going"
      responses:
        '200':
          description: "Attendance updated successfully"
        '400':
          description: "New attendance status is required"
        '404':
          description: "Attendance record not found"

    delete:
      summary: "Delete attendance for an event"
      description: "Deletes the current user's attendance record. Requires JWT."
      tags:
        - Attendance
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
          description: "Event ID"
      responses:
        '200':
          description: "Attendance deleted successfully"
        '404':
          description: "Attendance record not found or already deleted"

  /users/{user_id}/attendance:
    get:
      summary: "List user’s attended or interested events"
      description: "Retrieves a list of all events that a specific user is attending or interested in."
      tags:
        - Attendance
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "User ID"
      responses:
        '200':
          description: "List of events the user is attending/interested in"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: integer
                      example: 10
                    event_name:
                      type: string
                      example: "Sample Event"
                    status:
                      type: string
                      example: "going"
                    event_date:
                      type: string
                      format: date
                      example: "2025-02-20"

  /events/attendance/top-users:
    get:
      summary: "List top users with the most event attendance"
      description: "Retrieves users who have attended (or shown interest in) the most events."
      tags:
        - Attendance
      responses:
        '200':
          description: "List of top users"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      example: 101
                    username:
                      type: string
                      example: "alice"
                    total_attendance:
                      type: integer
                      example: 5

  /feedback:
    post:
      summary: "Add new feedback"
      description: "Adds feedback for a specific event. Requires JWT."
      tags:
        - Feedback
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  example: 1
                rating:
                  type: integer
                  example: 5
                feedback:
                  type: string
                  example: "Great event!"
      responses:
        '201':
          description: "Feedback added successfully"
        '400':
          description: "event_id and rating are required"

  /feedback/events/{event_id}:
    get:
      summary: "Get feedback for an event"
      description: "Retrieves all feedback associated with a specific event."
      tags:
        - Feedback
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
          description: "Event ID"
      responses:
        '200':
          description: "List of feedback for the event"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    feedback_id:
                      type: integer
                      example: 10
                    user_id:
                      type: integer
                      example: 101
                    username:
                      type: string
                      example: "alice"
                    rating:
                      type: integer
                      example: 5
                    feedback:
                      type: string
                      example: "Great event!"
                    created_at:
                      type: string
                      format: date-time
                      example: "2025-01-04T12:00:00"

  /feedback/users/{user_id}:
    get:
      summary: "Get feedback by user"
      description: "Retrieves all feedback created by a specific user."
      tags:
        - Feedback
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "User ID"
      responses:
        '200':
          description: "List of feedback by the user"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    feedback_id:
                      type: integer
                      example: 15
                    event_id:
                      type: integer
                      example: 2
                    event_name:
                      type: string
                      example: "Sample Event"
                    rating:
                      type: integer
                      example: 4
                    feedback:
                      type: string
                      example: "It was good."
                    created_at:
                      type: string
                      format: date-time
                      example: "2025-01-04T14:00:00"

  /feedback/stars/{event_id}:
    get:
      summary: "Get average rating and total feedback count for an event"
      description: "Retrieves the average rating and total feedback count for a specific event."
      tags:
        - Feedback
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: integer
          description: "Event ID"
      responses:
        '200':
          description: "Average rating and total feedback"
          content:
            application/json:
              schema:
                type: object
                properties:
                  average_rating:
                    type: number
                    format: float
                    example: 4.5
                  total_feedback:
                    type: integer
                    example: 12

  /feedback/{feedback_id}:
    put:
      summary: "Update feedback"
      description: "Updates an existing feedback. Only the owner of the feedback can do this. Requires JWT."
      tags:
        - Feedback
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedback_id
          required: true
          schema:
            type: integer
          description: "Feedback ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  example: 4
                feedback:
                  type: string
                  example: "It was good, but could be better."
      responses:
        '200':
          description: "Feedback updated successfully"
        '400':
          description: "rating is required"
        '403':
          description: "You can only update your own feedback"
        '404':
          description: "Feedback not found"

    delete:
      summary: "Delete feedback"
      description: "Deletes a feedback. Only the feedback owner or the event creator can do this. Requires JWT."
      tags:
        - Feedback
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedback_id
          required: true
          schema:
            type: integer
          description: "Feedback ID"
      responses:
        '200':
          description: "Feedback deleted successfully"
        '403':
          description: "You are not allowed to delete this feedback"
        '404':
          description: "Feedback not found"


